{"version":3,"sources":["utils/Socket.js","component/UserList.js","component/DisplayConversation.js","component/ChatInput.js","App.js","serviceWorker.js","index.js"],"names":["Socket","io","UserNames","color","fontWeight","currentUser","userList","map","user","username","style","key","id","TextProperty","listStyle","fontSize","conversation","message","timedate","timestamp","moment","format","useStyles","makeStyles","theme","root","padding","display","alignItems","width","input","marginLeft","spacing","flex","iconButton","divider","height","margin","handleSubmit","handleInput","classes","Paper","component","className","onSubmit","Input","type","placeholder","onChange","value","inputProps","IconButton","aria-label","onClick","MainContainer","ChatConvo","flexDirection","position","right","ChatContainer","bottom","ChatText","App","useState","setCurrentUser","setUserList","setConversation","setInput","useEffect","emit","on","users","data","console","log","convo","UserList","DisplayConversation","ChatInput","e","preventDefault","Date","now","target","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.f48466ee.chunk.js","sourcesContent":["import io from 'socket.io-client'\nconst Socket = io('https://lirenyeo-react-group-chat-socket-io-server-1.glitch.me/')\n\nexport default Socket","import React from 'react';\n\n\nconst UserNames = {\n    color: 'white',\n    fontWeight: 'lighter'\n}\n\nexport default ({ currentUser, userList }) => {\n\n    return (\n        <>\n            {\n                userList.map(user => {\n                    if (user.username === currentUser.username) {\n                        return <h2 style={UserNames} key={currentUser.id}>{currentUser.username}</h2>\n                    }\n                    else {\n                        return <li style={UserNames} key={user.id}>{user.username}</li>        \n                    }\n                })\n            }\n        </>\n    )\n}","import React from 'react';\nimport moment from 'moment'\n\n\nconst TextProperty = {\n    color: 'white',\n    listStyle: 'none',\n    fontSize: '1.5rem'\n}\n\nexport default ({ conversation }) => {\n    \n    return (\n        <ul>\n            {\n                conversation.map(message => {\n                    let timedate = message.timestamp\n                    return (\n                        <>\n                            <li style={TextProperty}>\n                                {message.message}\n                                <p style={{fontSize: '0.8rem'}} >\n                                    {moment(timedate).format('MMMM Do YYYY, h:mm:ss a')}\n                                </p>\n                            </li>\n                        </>\n                    )\n                })\n            }\n        </ul>\n    )\n}","import React from 'react';\nimport Input from '@material-ui/core/Input';\nimport SendIcon from '@material-ui/icons/Send';\nimport IconButton from '@material-ui/core/IconButton';\nimport Paper from '@material-ui/core/Paper';\n\nimport { makeStyles } from '@material-ui/core/styles';\n\n\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        padding: '2px 4px',\n        display: 'flex',\n        alignItems: 'center',\n        width: '80vw',\n    },\n    input: {\n        marginLeft: theme.spacing(1),\n        flex: 1,\n    },\n    iconButton: {\n        padding: 10,\n    },\n    divider: {\n        height: 28,\n        margin: 4,\n    },\n\n}));\n\nexport default ({ input, handleSubmit, handleInput }) => {\n    const classes = useStyles();\n\n    return (\n        <Paper component=\"form\" className={classes.root} onSubmit={handleSubmit}>\n\n            <Input type='text' placeholder='Send message...' onChange={handleInput} value={input} inputProps={{ 'aria-label': 'description' }} className={classes.input} />\n\n            <IconButton color=\"primary\" className={classes.iconButton} aria-label=\"directions\" onClick={handleSubmit}>\n\n                <SendIcon display=\"inline\" />\n            </IconButton>\n        </Paper>\n    )\n}","import React, { useState, useEffect } from 'react';\nimport Socket from './utils/Socket';\n\nimport UserList from './component/UserList';\nimport DisplayConversation from './component/DisplayConversation';\nimport ChatInput from './component/ChatInput';\n\nimport 'fontsource-roboto';\nimport './App.css';\n\nconst MainContainer = {\n  display: 'flex'\n}\n\nconst ChatConvo = {\n  display: 'flex',\n  flexDirection: 'column', \n  position: 'fixed',\n  right: '81%'\n}\n\nconst ChatContainer = {\n  position: 'fixed',\n  bottom: '10px'\n}\n\nconst ChatText = {\n  position: 'fixed',\n  bottom: '60px'\n}\n\n\nfunction App() {\n\n  const [currentUser, setCurrentUser] = useState({})\n  const [userList, setUserList] = useState([])\n  const [conversation, setConversation] = useState([])\n  const [input, setInput] = useState('');\n\n  useEffect(() => {\n    Socket.emit('NEW_USER')\n\n    Socket.on('GET_CURRENT_USER', user => {\n      // think about what to do here\n      setCurrentUser(user)\n      // console.log(user)\n    })\n\n    Socket.on('UPDATE_USER_LIST', users => {\n      // think about what to do here\n      setUserList(users)\n      // console.log(users)\n    })\n\n    Socket.on('RECEIVE_BROADCAST', data => {\n      // think about what to do here\n      console.log(data)\n      setConversation((convo) => {\n        console.log(convo)\n        return [\n          ...convo,\n          data\n        ]\n      })\n    })\n  }, [])\n\n  const handleInput = (e) => {\n    setInput(e.target.value)\n  }\n\n  const handleSubmit = (e) => {\n    e.preventDefault()\n    let data = {\n      username: currentUser.username,\n      message: input,\n      timestamp: Date.now()\n    }\n    Socket.emit('BROADCAST_MESSAGE', data)\n    setInput('')\n  }\n\n\n  return (\n    <div style={MainContainer}>\n\n      <div style={{margin: '20px'}}>\n        <h1 style={{color: 'white', fontSize: '2rem'}}>User List</h1>\n      <UserList currentUser={currentUser} userList={userList} />\n      </div>\n      <div style={ChatConvo}>\n        <div style={ChatText}>\n          <DisplayConversation conversation={conversation} />\n        </div>\n        <div style={ChatContainer}>\n          <ChatInput input={input} handleSubmit={handleSubmit} handleInput={handleInput} setInput={setInput} />\n        </div>\n      </div>\n\n\n      {/* <Chatroom /> */}\n\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}